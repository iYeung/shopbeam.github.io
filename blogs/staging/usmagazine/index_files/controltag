
/* Controltag Loader for Wenner Media */
(function(){
  function debugLog(msg) {
    var isDebug = /kxdebug=(1|true)/.test(location);
    if (isDebug && typeof window.console === 'object' && typeof console.info === 'function') {
      console.info(msg);
    }
  }

  function loadCT(url, callback) {
    debugLog('Loading Krux control tag.');
    var ct_element = document.createElement('script');
    ct_element.async = true;
    ct_element.src = url;

    ct_element.onload = ct_element.onreadystatechange = function() {
      var state = ct_element.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        callback.done = true;
        callback();
      }
    };

    // Fetch the first script element, so we can insert the
    // controltag before it. There *must* be at least one
    // script element, or this code would never be called
    var sibling = document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(ct_element, sibling);
  };

  function loadConfig() {
    
    
    debugLog('Loading krux configuration.');

    var config = {"confid": "ImaMb4Cy", "context_terms": [], "dnt": null, "geo":{"COUNTRY":"US", "REGION":"NY", "CITY":"NEWYORK", "GEOREGION":"274", "DMA":"501", "PMSA":"5600", "AREACODE":"212", "COUNTY":"NEWYORK", "FIPS":"36061", "LATITUDE":"40.7500", "LONGITUDE":"-73.9967", "TIMEZONE":"EST", "ZIP":"10001-10014 10016-10041 10043-10045 10055 10060 10065 10069 10075 10080-10081 10087 10090 10095 10101-10126 10128-10133 10138 10150-10179 10185 10199-10200 10203 10211-10213 10242 10249 10256-10261 10265 10268-10282 10285-10286 10292", "CONTINENT":"NA"}, "params": {"beacon_host": "beacon.krxd.net", "capture_js_errors": "true", "capture_leakage": true, "client_side_storage": "localStorage,cookie", "context_terms": "false", "control_tag_load_sync": "false", "control_tag_namespace": null, "control_tag_pixel_throttle": "100", "control_tag_stats_prefix": null, "control_tag_version": "stable", "datatag_version": "3", "jslog_host": "jslog.krxd.net", "max_slot_time": 1000, "no_pii": 0, "revenue_optimization": false, "services_host": "apiservices.krxd.net", "site_level_supertag_config": "site", "supertag_requires_approval": false}, "partner_segment_map": {}, "publisher": {"id": 12048, "name": "Wenner Media", "uuid": "2e379285-4c71-4e15-bc41-4d8cfe3ec56c"}, "realtime_segments": [{"id": "n93xuub29", "test": ["and", ["or", ["and", ["or", "$event_I-bojGTq"]]]]}], "segments": [], "services": {"data": "//beacon.krxd.net/data.gif", "event": "//beacon.krxd.net/event.gif", "impression": "//beacon.krxd.net/ad_impression.gif", "log": "//jslog.krxd.net/jslog.gif", "pixel": "//beacon.krxd.net/pixel.gif", "social": "//beacon.krxd.net/social.gif", "stats": "//apiservices.krxd.net/stats", "um": "//apiservices.krxd.net/um", "userData": "//apiservices.krxd.net/user_data/segments/3"}, "site": {"id": 14998, "name": "Us Weekly"}, "tags": [{"content": "<script type=\"text/javascript\">\r\n// DFP premium.\r\n(function(require) {\r\n  var store = require('store');\r\n  var _ = require('util');  \r\n  var segments;\r\n  \r\n  function handleUserDataResponse(r) {\r\n    // Handle the response as usual.\r\n    segments.handleUserDataResponse(r);\r\n    \r\n    // Override localStorage.kxuser with a case-insensitive value for DFP premium.\r\n    // This will get read by the interchange direct snippet for Krux.user\r\n    // and Krux.dfpKeyValues\r\n    if(r.kuid_long) {\r\n      store.set('user', r.kuid_long, store.DAYS*30);\r\n    }\r\n  }\r\n  \r\n  // Our own fetch uses our own handleResponse\r\n  function fetch() {\r\n    var options = {\r\n      url: _.get('url_userData'),\r\n      data: {pubid: _.get('pubid')},\r\n      callback: 'kxjsonp_userData',\r\n      done: handleUserDataResponse\r\n    };\r\n    if(!segments.readTechFromStore()) {\r\n      options.data.technographics = 1;\r\n    }\r\n    require('http').jsonp(options);  \r\n  }\r\n  \r\n  \r\n  if(!store.get('segWait')) {\r\n    // disable segments.fetch and use our own\r\n    _.set('segWait', 1, store.MINUTES*5);\r\n    _.onOnce('dom:load', fetch);\r\n    _.fire('user_data_fetch_scheduled');\r\n  }\r\n  \r\n  // Finally, require segments as usual.\r\n  segments = require('segments');\r\n}(Krux.require));\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "id": 25292, "internal": 1, "library_tag_config": {}, "method": "document", "name": "Krux Load Segments v2", "require": "", "target": "", "target_action": null, "tier": 2, "timing": "asap", "type": "library"}, {"content": "<script type=\"text/javascript\">\r\n(function() {\r\n    var cb = Math.round(new Date().getTime() / 1000);\r\n    var redir = 'redirect=http://beacon.krxd.net/data.gif?_kdpid=60658cab-0a68-42f9-a299-b4dee97e21c4';\r\n    var qurl = \"http://segapi.quantserve.com/seg/r;a=p-41yObSuSE7DTI;\" + cb + \";\" + redir;\r\n    (new Image()).src = qurl;\r\n  }\r\n)();\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 27704, "internal": 38, "method": "document", "name": "Quantcast (Wenner Media) provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload", "type": "data provider"}, {"content": "<script>\r\n(function() {\r\n  // adadvisor redirects to http://logger... so it's not https safe\r\n  if (location.protocol == \"http:\") {\r\n     var u = \"https://adadvisor.net/adscores/g.js?sid=9212244187&_kdpid=2111c0af-fc3a-446f-ab07-63aa74fbde8e\";\r\n     (new Image()).src = u;\r\n   }\r\n})();\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 27479, "internal": 22, "method": "document", "name": "AdAdvisor S2S provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload", "type": "data provider"}, {"content": "<script type=\"text/javascript\">Krux('social.init');</script>", "content_type": "html", "docwrite": null, "execution_results": null, "id": 25248, "internal": 1, "library_tag_config": {}, "method": "document", "name": "Krux Track Social", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload", "type": "library"}, {"content": "<script>\r\n// this tag is intentionally blank\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 25249, "internal": 6, "method": "document", "name": "Technographic Data provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload", "type": "data provider"}, {"content": "", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 25250, "internal": 14, "method": "document", "name": "Krux Geographic Data provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n    Krux('require:http').pixel({\r\n      url: \"//p.acxiom-online.com/pixel/sci\",\r\n      data: {\r\n          uid: kuid,\r\n          _kdpid: 'f19b7626-3732-4dcc-bac5-8d2c937dae9a',\r\n          pid: 3021\r\n      }});\r\n  }\r\n  })();\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 25251, "internal": 21, "method": "document", "name": "Acxiom S2S provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload", "type": "data provider"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n    Krux('require:http').pixel({\r\n      url: \"//krxd.nexac.com/dlx.gif\",\r\n      data: {\r\n          _kdpid: '2dd640a6-6ebd-4d4f-af30-af8baa441a0d',\r\n          kuid: kuid\r\n      }});\r\n  }\r\n  })();\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 25252, "internal": 8, "method": "document", "name": "DataLogix provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload", "type": "data provider"}, {"content": "<script>\r\n(function(){\r\n  if (window.KRUX) {\r\n    var pubid = KRUXSetup.pubid;\r\n  } else if (window.Krux) {\r\n    var pubid = Krux('get', 'pubid');\r\n  } else { \r\n    return;\r\n  }\r\n  var prefix = location.protocol == 'https:' ? \"https:\" : \"http:\";\r\n  var kurl = prefix + '//beacon.krxd.net/data.gif?_kdpid=890a6228-04af-4630-85b6-0b49dee6157f&pid=' + pubid;\r\n  var u = prefix + '//api.bizographics.com/v1/profile.redirect?api_key=595bae8dbc0c4c42b4544e688b10c002' + \r\n        '&callback_url=' + escape(kurl);\r\n  var i = new Image();\r\n  i.src = u;\r\n})();\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 25253, "internal": 2, "method": "document", "name": "Bizo provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload", "type": "data provider"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n    Krux('require:http').pixel({\r\n      url: \"//loadm.exelator.com/load\",\r\n      data: {\r\n          _kdpid: 'e4942ff0-4070-4896-a7ef-e6a5a30ce9f9',\r\n          buid: kuid,\r\n          p: '204',\r\n          g: '270',\r\n          j: '0'\r\n      }});\r\n  }\r\n  })();\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 25254, "internal": 11, "method": "document", "name": "eXelate Media provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload", "type": "data provider"}, {"content": "<script>\r\n  Krux('require:http').pixel({\r\n    url: \"//s.ixiaa.com/digi/C726AB29-0470-440B-B8D2-D552CED3A3DC/a.gif\"\r\n  });\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 26100, "internal": 28, "method": "document", "name": "IXI Digital (Open Market) provider tag", "require": "", "target": null, "target_action": "append", "tier": 1, "timing": "onload", "type": "data provider"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid && kuid.length == 8) {\r\n      var prefix = location.protocol == 'https:' ? \"https:\" :\"http:\";\r\n      var r_url = prefix + '//cm.g.doubleclick.net/pixel'\r\n      var kurl = prefix + '//apiservices.krxd.net/um?partner=google&r=' + r_url;\r\n      var i = new Image();\r\n      i.src = kurl;\r\n  }\r\n})();\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 28171, "internal": 1, "method": "document", "name": "Google User Matching", "require": "", "target": "", "target_action": null, "tier": 1, "timing": "onload", "type": "publisher"}, {"content": "<script>\r\n(function(){\r\n  if (window.Krux) {\r\n    var kuid = window.Krux('get', 'user');\r\n    if (kuid) {\r\n       var rubicon_url = '//tap.rubiconproject.com/oz/feeds/krux/tokens?afu=' + kuid;\r\n       var i = new Image();\r\n       i.src = rubicon_url;\r\n\r\n      var ki = new Image();\r\n      ki.src = '//beacon.krxd.net/usermatch.gif?partner=rubicon&kuid=' + kuid;\r\n    }\r\n  }\r\n})();\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": null, "freq_cap": 3, "id": 28899, "internal": 1, "method": "document", "name": "Rubicon User Match", "require": "", "target": "", "target_action": null, "tier": 1, "timing": "onload", "type": "publisher"}, {"content": "<script>\r\n// Using Meta keywords to produce page attribute keywords\r\nKrux('scrape', { \"page_attr_us_keywords\": {meta_name: \"keywords\"}});\r\n// Using Meta news_keywords to produce page attribute news_keywords\r\nKrux('scrape', { \"page_attr_us_news_keywords\": {meta_name: \"news_keywords\"}});\r\n// Using UrlPath 1 to produce page attribute url_path_1\r\nKrux('scrape', { \"page_attr_us_section\": {url_path: \"1\"}});\r\n// Using UrlPath 2 to produce page attribute url_path_2\r\nKrux('scrape', { \"page_attr_us_subsection\": {url_path: \"2\"}});\r\n// Using Dart channel to produce page attribute dart_channel\r\nKrux('scrape', { \"page_attr_us_dart_channel\": {dart: \"channel\"}});\r\n</script>", "content_type": "html", "docwrite": null, "execution_results": {"docwrite": false, "listeners": [], "onloadSafe": true}, "id": 25612, "internal": 1, "method": "document", "name": "Krux DTC UsWeekly", "require": "", "target": "", "target_action": null, "tier": 1, "timing": "onready", "type": "publisher"}]};

    // Wrap in a function and comment, then toString the func and replace
    // everything that's not the beginning or end of a JSON object, so we get a
    // string that's either empty or JSON.
    var esiGeo = String(function(){/*
      <esi:include src="/geoip_esi"/>
    */}).replace(/^.*\/\*[^{]+|[^}]+\*\/.*$/g, '');

    if (esiGeo) {
      config.geo = esiGeo;
    }

    Krux('config', config);
    
  };

  loadCT( "//cdn.krxd.net/ctjs/controltag.js.8199b31f1f3181d713e4638eb1119712", loadConfig );
})();
